@use "sass:math";
@import "../components/common.scss";

comp-toggleswitch {
    $height: 2rem;
    $touchHeight: 2.5rem;

    position: relative;
    display: flex;
    justify-content: space-between;
    align-items: center;
    user-select: none;

    &.READ {
        filter: var(--readOpacityFilter);
        pointer-events: none;
    }

    &.NONE {
        display: none;
    }

    &.horz {
        min-height: $height;
        max-height: 100%;

        .touch & {
            min-height: $touchHeight;
        }

        >span {
            text-align: center;
        }
    }


    &.vert {
        min-width: min-content;
        min-height: $height;
        flex-shrink: 0;
    }

    &.left {
        flex-direction: row;

        >div {
            margin-left: auto;
        }
    }

    &.right {
        flex-direction: row-reverse;

        >div {
            margin-right: auto;
        }
    }

    &.up {
        flex-direction: column;
    }

    &.down {
        flex-direction: column-reverse;
    }

    >span {
        color: var(--componentLabelTextColor);
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding: 0.2rem;
        min-width: 5rem;

        .anim & {
            transition: color var(--colorTransitionType) var(--colorTransitionTime);
        }
    }

    @media(hover: hover) and (pointer: fine) {
        &:hover>div::after {
            background-color: var(--componentHoverBackGroundColor);
        }
    }

    >div {
        touch-action: none;
        flex-shrink: 0;
        position: relative;
        background-color: var(--componentRedColor);
        width: $height * 2;
        height: $height;
        border-radius: math.div($height, 2);
        box-shadow: var(--componentShadowIn);

        &:focus {
            outline: none;
        }

        @media(hover: hover) and (pointer: fine) {
            &:focus {
                outline: none;
                box-shadow: var(--componentShadowFocus), var(--componentShadowIn);
                z-index: 2;
            }
        }



        .touch & {
            width: $touchHeight * 2;
            height: $touchHeight;
            border-radius: math.div($touchHeight, 2);
        }

        .anim & {
            transition: height var(--sizeTransitionType) var(--sizeTransitionTime), width var(--sizeTransitionType) var(--sizeTransitionTime), border-radius var(--sizeTransitionType) var(--sizeTransitionTime), background-color var(--colorTransitionType) var(--colorTransitionTime), box-shadow var(--colorTransitionType) var(--colorTransitionTime);
        }

        &::after {
            touch-action: none;
            content: '';
            left: 0rem;
            position: absolute;
            background-color: var(--componentToggleSwitchColor);
            width: $height;
            height: $height;
            border-radius: math.div($height, 2);
            box-shadow: inset 0 0 0px 2px var(--componentToggleSwitchBorderColor), var(--componentShadowOut);

            .touch & {
                width: $touchHeight;
                height: $touchHeight;
                border-radius: math.div($touchHeight, 2);
            }

            .anim & {
                transition: width var(--sizeTransitionType) var(--sizeTransitionTime), height var(--sizeTransitionType) var(--sizeTransitionTime), left var(--sizeTransitionType) var(--sizeTransitionTime), border-radius var(--sizeTransitionType) var(--sizeTransitionTime), background-color var(--colorTransitionType) var(--colorTransitionTime), box-shadow var(--colorTransitionType) var(--colorTransitionTime);
            }
        }

        &.on {
            background-color: var(--componentGreenColor);

            &::after {
                left: $height;

                .touch & {
                    left: $touchHeight;
                }
            }
        }
    }

    >svg {
        flex-shrink: 0;
        height: $height;
        width: auto;
        max-width: $height;
        padding: 0.3rem;
        fill: var(--componentSymbolColor);

        .touch & {
            height: $touchHeight;
            max-width: $touchHeight;
        }

        .anim & {
            transition: fill var(--colorTransitionType) var(--colorTransitionTime), height var(--sizeTransitionType) var(--sizeTransitionTime), max-width var(--sizeTransitionType) var(--sizeTransitionTime);
        }
    }
}